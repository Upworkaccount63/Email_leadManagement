{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\johnm\\\\Desktop\\\\code\\\\leadManagement\\\\frontend\\\\gui\\\\src\\\\components\\\\emailStage\\\\WithoutEmails.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Full Name',\n  width: 100,\n  dataIndex: 'name',\n  key: 'name',\n  fixed: 'left'\n}, {\n  title: 'Company',\n  width: 100,\n  dataIndex: 'company',\n  key: 'company',\n  fixed: 'left'\n}, {\n  title: 'Category',\n  dataIndex: 'category',\n  key: 'category',\n  width: 100\n}, {\n  title: 'Email',\n  dataIndex: 'email',\n  key: 'email',\n  width: 150\n}, {\n  title: 'Twitter',\n  dataIndex: 'twitter',\n  key: 'twitter',\n  width: 150\n}, {\n  title: 'LinkedIn',\n  dataIndex: 'linkedin',\n  key: 'linkedin',\n  width: 150\n}, {\n  title: 'Angel.co',\n  dataIndex: 'angel',\n  key: 'angel',\n  width: 150\n}, {\n  title: 'Crunchbase',\n  dataIndex: 'crunchbase',\n  key: 'crunchbase',\n  width: 150\n}, {\n  title: 'Date Created',\n  dataIndex: 'date_created',\n  key: 'date_created'\n}, {\n  title: 'Edit',\n  key: 'operationEdit',\n  fixed: 'right',\n  width: 75,\n  render: () => /*#__PURE__*/_jsxDEV(\"button\", {\n    children: \"Edit\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 19\n  }, this)\n}, {\n  title: 'Delete',\n  key: 'operationDelete',\n  fixed: 'right',\n  width: 100,\n  render: () => /*#__PURE__*/_jsxDEV(\"button\", {\n    children: \"Delete\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 19\n  }, this)\n}];\nconst data = [];\n\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edward Coliglio ${i}`,\n    company: 'Robert Half',\n    category: 'Angel',\n    email: `angelInvestor@angelInvestor.com`\n  });\n}\n\nconst WithoutEmails = () => {\n  _s();\n\n  const [searchText, setSearchText] = useState('');\n  const [searchedColumn, setSearchedColumn] = useState();\n\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    setSearchText(selectedKeys[0]);\n    setSearchedColumn(dataIndex);\n  };\n\n  const handleReset = clearFilters => {\n    clearFilters();\n    setSearchText('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    dataSource: data,\n    scroll: {\n      x: 1500\n    } // summary={pageData => (\n    //   <Table.Summary fixed>\n    //     <Table.Summary.Row>\n    //       <Table.Summary.Cell index={0} colSpan={2}>\n    //         Fix Left\n    //       </Table.Summary.Cell>\n    //       <Table.Summary.Cell index={2} colSpan={8}>\n    //         Scroll Context\n    //       </Table.Summary.Cell>\n    //       <Table.Summary.Cell index={10}>Fix Right</Table.Summary.Cell>\n    //     </Table.Summary.Row>\n    //   </Table.Summary>\n    // )}\n    ,\n    sticky: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WithoutEmails, \"n+pe6qY8Fh2U4kFlj17YA6oeqvA=\");\n\n_c = WithoutEmails;\nexport default WithoutEmails; // takes in the data stored in state, filters the data by email validation uses filteredTable state, export filteredTablestate to csv to google sheets,\n\nvar _c;\n\n$RefreshReg$(_c, \"WithoutEmails\");","map":{"version":3,"sources":["C:/Users/johnm/Desktop/code/leadManagement/frontend/gui/src/components/emailStage/WithoutEmails.js"],"names":["useState","Table","columns","title","width","dataIndex","key","fixed","render","data","i","push","name","company","category","email","WithoutEmails","searchText","setSearchText","searchedColumn","setSearchedColumn","handleSearch","selectedKeys","confirm","handleReset","clearFilters","x"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport { Table } from 'antd';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Full Name',\r\n    width: 100,\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    fixed: 'left',\r\n  },\r\n  {\r\n    title: 'Company',\r\n    width: 100,\r\n    dataIndex: 'company',\r\n    key: 'company',\r\n    fixed: 'left',\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'category',\r\n    key: 'category',\r\n    width: 100,\r\n  },\r\n  {\r\n    title: 'Email',\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n    width: 150,\r\n  },\r\n  {\r\n    title: 'Twitter',\r\n    dataIndex: 'twitter',\r\n    key: 'twitter',\r\n    width: 150,\r\n  },\r\n  {\r\n    title: 'LinkedIn',\r\n    dataIndex: 'linkedin',\r\n    key: 'linkedin',\r\n    width: 150,\r\n  },\r\n  {\r\n    title: 'Angel.co',\r\n    dataIndex: 'angel',\r\n    key: 'angel',\r\n    width: 150,\r\n  },\r\n  {\r\n    title: 'Crunchbase',\r\n    dataIndex: 'crunchbase',\r\n    key: 'crunchbase',\r\n    width: 150,\r\n  },\r\n  { \r\n    title: 'Date Created',\r\n    dataIndex: 'date_created',\r\n    key: 'date_created' \r\n  },\r\n  {\r\n    title: 'Edit',\r\n    key: 'operationEdit',\r\n    fixed: 'right',\r\n    width: 75,\r\n    render: () => <button>Edit</button>,\r\n  },\r\n  {\r\n    title: 'Delete',\r\n    key: 'operationDelete',\r\n    fixed: 'right',\r\n    width: 100,\r\n    render: () => <button>Delete</button>,\r\n  }\r\n];\r\n\r\nconst data = [];\r\nfor (let i = 0; i < 100; i++) {\r\n  data.push({\r\n    key: i,\r\n    name: `Edward Coliglio ${i}`,\r\n    company: 'Robert Half',\r\n    category: 'Angel',\r\n    email: `angelInvestor@angelInvestor.com`,\r\n    \r\n  });\r\n}\r\n\r\n\r\nconst WithoutEmails=()=>{\r\n  const [searchText, setSearchText] = useState('')\r\n  const [searchedColumn, setSearchedColumn] = useState()\r\n  \r\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    setSearchText(selectedKeys[0])\r\n    setSearchedColumn(dataIndex)\r\n  };\r\n\r\n  const handleReset = clearFilters => {\r\n    clearFilters();\r\n    setSearchText('')\r\n  };\r\n\r\n  return(\r\n    <Table\r\n    columns={columns}\r\n    dataSource={data}\r\n    scroll={{ x: 1500 }}\r\n    // summary={pageData => (\r\n    //   <Table.Summary fixed>\r\n    //     <Table.Summary.Row>\r\n    //       <Table.Summary.Cell index={0} colSpan={2}>\r\n    //         Fix Left\r\n    //       </Table.Summary.Cell>\r\n    //       <Table.Summary.Cell index={2} colSpan={8}>\r\n    //         Scroll Context\r\n    //       </Table.Summary.Cell>\r\n    //       <Table.Summary.Cell index={10}>Fix Right</Table.Summary.Cell>\r\n    //     </Table.Summary.Row>\r\n    //   </Table.Summary>\r\n    // )}\r\n    sticky\r\n  />\r\n  )\r\n}\r\n\r\nexport default WithoutEmails\r\n\r\n\r\n// takes in the data stored in state, filters the data by email validation uses filteredTable state, export filteredTablestate to csv to google sheets,\r\n"]},"metadata":{},"sourceType":"module"}